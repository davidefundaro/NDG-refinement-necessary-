library(dplyr)
library(readr)
library(tidyverse)

#upload a csv file
ndg <- read.csv("ndg.csv", sep= ';')

#rename first dataset
X <- ndg

#give names to columns using the first row
names(X) <- X[1,]
#eliminate the first row (no more necessary)
X <- X[-1,]

#convert - into ,
X <- as.data.frame(gsub("[-]", ",", as.matrix(X)))

#create a column for address id and set it as numeric
X$ID_Address <- seq(nrow(X))
X$ID_Address <- X$ID_Address %>% as.numeric()

#separate rows by , for BorrowsName and place the problematic rows as last
X2 <- X %>% mutate(BorrowerName = strsplit(as.character(BorrowerName), ",")) %>% 
  unnest(BorrowerName) %>% slice(c(1:2, 7:n(), 3:6))
X2 <-  X2 %>% select(BorrowerName)

#separate rows by , for Tax ID and place the problematic rows (multinamed) as last
X3 <- X %>% mutate(`Tax ID` = strsplit(as.character(`Tax ID`), ",")) %>%
  unnest(`Tax ID`) %>% slice(c(1:2, 6:n(), 3:5))
X3 <-  X3 %>% select(`Tax ID`)

#unify X2 (names) with X3 (tax id)
X_name_id <- merge(X2, X3, by = "row.names", all = TRUE)
X_name_id <- X_name_id %>% select(-`Row.names`)

#split names in X
X <- X %>% mutate(BorrowerName = strsplit(as.character(BorrowerName), ",")) %>% 
  unnest(BorrowerName)

#eliminate tax id in X
X <- X %>% select(-`Tax ID`)

#merge name-id dataset with X
X_fine <- merge(X, X_name_id, by = "BorrowerName", all = TRUE)
X <- X_fine

#eliminate commas
X <- as.data.frame(gsub("[,]", "", as.matrix(X)))

#convert empty spaces in NA
X[X == ""] <- NA

#delete spaces at the beginning of the BorrowerName and Tax ID
X$BorrowerName <- X$BorrowerName %>% str_trim(side = "both")
X$`Tax ID` <- X$`Tax ID` %>% str_trim(side = "both")

NDG_table <- X

#give new names to columns
NDG_table<- NDG_table %>% rename(Name = BorrowerName, Region = `Borrower's Region`, TaxID= `Tax ID`)

#unify NDG with name
NDG_table$Key <-  paste(NDG_table$Name,NDG_table$NDG)
#change  spaces with _
NDG_table$Key <- gsub("[ ]", "_", NDG_table$Key)
#reorder the columns
NDG_table <- NDG_table %>% subset(select=c(Key, Name, TaxID, NDG:ID_Address))

#function to detect potential primary keys
detect_primary_keys <- function(NDG_table) {
  possible_keys <- character(0)
  
  for (col in names(NDG_table)) {
    if (length(unique(NDG_table[[col]])) == nrow(NDG_table) && !any(is.na(NDG_table[[col]]))) {
      possible_keys <- c(possible_keys, col)
    }
  }
  return(possible_keys)
}

possible_keys <- detect_primary_keys(NDG_table)
print(possible_keys)

#create table for position information only and not duplicated
Address_table <- NDG_table %>% subset(select=c(ID_Address, Address:Region))
#eliminate duplicates
Address_table <- Address_table[!duplicated(Address_table), ]
#reorder rows according to city
Address_table <- Address_table %>% arrange(City)


#eliminate columns that are already in the address table
NDG_table_no_address <- NDG_table %>% select(-Address:-Region)

#create borrower table
Borrower_table <- NDG_table_no_address %>% select(-Category)

#create NDG final table
NDG_final <- NDG_table_no_address %>% select(-Key, -Name, -TaxID, -ID_Address, -Group)
#eliminate duplicates
NDG_final <- NDG_final[!duplicated(NDG_final), ]
#reorder rows according to NDG
NDG_final <- NDG_final %>% arrange(NDG)
